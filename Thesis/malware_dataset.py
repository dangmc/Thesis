import  numpy as np
import json


train_dir = ''
valid_dir = ''
test_dir = ''

class   Dataset:

    def __init__(self, _gram, _labels):
        self.gram = _gram
        self.labels = _labels
        self.index_in_epochs = 0
        self.epochs_completed = 0
        self.num_instances = _gram.shape[0]

    def next_batch(self, batch_sz):
        start = self.index_in_epochs
        self.index_in_epochs += batch_sz
        if self.index_in_epochs > self.num_instances:
            self.epochs_completed += 1
            perm = np.arange(self.num_instances)
            np.random.shuffle(perm)
            self.gram = self.gram[perm]
            self.labels = self.labels[perm]
            start = 0
            self.index_in_epochs = batch_sz
        end = self.index_in_epochs

        return self.gram[start: end], self.labels[start: end]

    def get_gram(self):
        return self.gram

    def get_labels(self):
        return self.labels

    def get_epochs_completed(self):
        return self.epochs_completed

def extract_binary_gram(path):
    # TODO
    with open(path, 'r') as f:
        data = [json.load(line) for line in f]
        gram = np.array([ins['name'] for ins in data])
        labels = np.array([ins['id'] for ins in data])
        f.close()
    return gram, labels

def read_malware_dataset(path):

    class Datasets:
        pass
    datasets = Datasets()

    gram, labels = extract_binary_gram(path + train_dir)
    datasets.train = Dataset(gram, labels)

    gram, labels = extract_binary_gram(path + valid_dir)
    datasets.valid = Dataset(gram, labels)

    gram, labels = extract_binary_gram(path + test_dir)
    datasets.test = Dataset(gram, labels)

    return datasets
